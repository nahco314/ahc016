import copy
import random

from ahc016.main import Graph

g = Graph.from_01(
    100,

)


# maximum k-plex problem


def vertex_reduction(g: Graph, lb: int, k: int):
    q = []
    for v in range(g.n):
        if g.degrees[v] + k <= lb:
            q.append(v)
    while q:
        v = q.pop()
        for u in g.adj(v):
            if g.degrees[u] + k - 1 <= lb:
                q.append(u)
        for u in g.adj(v):
            g.disconnect(u, v)

    return g


def r(g: Graph, k, s: list[int], u: int) -> int:
    return k - len(set(s) - (set(g.adj(u)) | {u})) - 1


def c(g: Graph, k: int, s: list[int], u: int, v: int) -> int:
    v_dash = (set(g.adj(v)) - set(s)) | {v}
    d_g_dash_u = len(set(g.adj(u)) & v_dash)
    return min(d_g_dash_u + r(g, k, s, u) + 1, len(v_dash)) + r(g, k, s, v)


def v_reduction(g: Graph, s: list[int], lb: int, k: int, v: int):
    q = []
    for u in set(g.adj(v)) - set(s):
        if c(g, k, s, u, v) <= lb - len(s) + 1:
            q.append(u)
    while q:
        u = q.pop()
        h = (set(g.adj(u)) - set(g.adj(v))) - set(s)
        if g.degrees[u] >= 0:
            for i in g.adj(u):
                g.disconnect(i, u)
        for w in h:
            if c(g, k, s, w, v) <= lb - len(s) + 1:
                q.append(w)

    return g


def k_reduction(g: Graph, k: int, s: list[int]):
    for u in s:
        if not (len(set(s) - set(g.adj(u))) + 1 == k):
            continue
        for v in set(range(g.n)) - (set(g.adj(u)) | set(s)):
            for i in g.adj(v):
                g.disconnect(i, v)
    for u in set(range(g.n)) - set(s):
        if not (len(set(s) - set(g.adj(u))) + 1 > k):
            continue
        for i in g.adj(u):
            g.disconnect(i, u)

    return g


def bb(g: Graph, k: int, s: list[int], lb: int) -> int:
    if set(range(g.n)) - set(s) == set():
        return len(s)
    v = random.choice(list(set(range(g.n)) - set(s)))
    s.append(v)
    gr = copy.deepcopy(g)
    g = k_reduction(g, k, s)
    g = vertex_reduction(g, lb, k)
    g = v_reduction(g, s, lb, k, v)

    if (
        len(list(u for u in set(range(g.n)) - set(s) if g.degrees[u] + k > lb)) + len(s)
        > lb
    ):
        lb = max(lb, bb(g, k, s, lb))
    lb = max(lb, remove_reduction(gr, s, lb, k))
    return lb
